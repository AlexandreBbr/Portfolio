{
    "hero": {
        "title": "Alexandre ‚Äî D√©veloppeur Web & Logiciel",
        "subtitle": "Je con√ßois des applications web modernes et des logiciels sur mesure, alliant performance, esth√©tique et fiabilit√©.",
        "projectsBtn": "Voir mes projets",
        "contactBtn": "Me contacter"
    },
    "projects": {
        "title": "üöÄ Mes Projets",
        "tech": "Stack utilis√©e :",
        "showMore": "Afficher plus",
        "showLess": "Afficher moins",
        "rtype": {
            "short": "Un moteur de jeu multijoueur en C++ inspir√© de R-Type, avec client graphique, serveur multithread√© et communication UDP.",
            "full": "D√©velopp√© dans le cadre d‚Äôun projet avanc√© en C++, R-Type est un moteur de jeu orient√© architecture modulaire. Il inclut un serveur multithread√© en UDP, un client graphique utilisant SFML, et une communication r√©seau binaire. Le moteur suit une s√©paration stricte entre le rendu, la logique de jeu, le r√©seau et la physique. Le gameplay est inspir√© du c√©l√®bre Shoot'em up R-Type, avec gestion de plusieurs joueurs, monstres, tirs et niveaux. Le protocole r√©seau est enti√®rement document√© et le projet respecte les normes d‚Äôaccessibilit√© et de documentation professionnelle."
        },
        "gomoku": {
            "short": "Un bot d‚Äôintelligence artificielle jouant √† Gomoku avec un algorithme performant. Test√© contre divers adversaires dans des tournois.",
            "full": "Gomoku, ou \"Cinq en ligne\", est un jeu strat√©gique √† deux joueurs sur un plateau 20x20. Ce projet consistait √† d√©velopper une IA (nomm√©e 'pbrain-gomoku-ai') capable de battre d'autres bots dans des parties chronom√©tr√©es. L‚Äôalgorithme pouvait reposer sur des strat√©gies classiques (min-max, Monte Carlo...) mais devait rester l√©ger (70 Mo max) et r√©actif (5s max par coup). Le bot respecte un protocole de communication standard pour pouvoir s‚Äôaffronter dans un environnement de comp√©tition automatique. L‚Äôobjectif √©tait de reconna√Ætre des opportunit√©s de victoire, bloquer l‚Äôadversaire, et g√©rer des situations complexes sur le goban. Le code devait compiler sous Linux avec un Makefile strict, sans biblioth√®ques externes."
        },
        "raytracer": {
            "short": "Moteur de rendu bas√© sur le ray tracing pour g√©n√©rer des images r√©alistes en C++.",
            "full": "Ce projet impl√©mente un raytracer en C++ qui g√©n√®re des images r√©alistes √† partir d‚Äôun fichier de sc√®ne. Il supporte les primitives (sph√®re, plan, cylindre‚Ä¶), les transformations (translation, rotation), les lumi√®res directionnelles et ambiantes, et les mat√©riaux simples. Le rendu s‚Äôeffectue sans interface graphique via des fichiers PPM. L‚Äôarchitecture est extensible gr√¢ce √† des plugins dynamiques (.so) et repose sur des patrons de conception comme Factory ou Builder. Fonctionnalit√©s avanc√©es : multithreading, textures proc√©durales (bruit de Perlin, √©chiquier), antialiasing, r√©flexion, transparence, .OBJ loader et rendu interactif."
        },
        "zappy": {
            "short": "Un jeu en r√©seau multijoueur en C/C++ o√π plusieurs √©quipes s'affrontent sur une carte en qu√™te de ressources et d'√©volution",
            "full": "Zappy est un projet de jeu en r√©seau comprenant trois programmes : un serveur en C, une interface graphique en C++ et une IA autonome. Les joueurs, incarn√©s par des clients IA, √©voluent sur une carte torique en collectant des ressources et en accomplissant des rituels d'incantation pour monter en niveau. La premi√®re √©quipe √† atteindre six joueurs au niveau maximal remporte la partie. Le serveur g√®re la g√©n√©ration du monde, les r√®gles de mont√©e en niveau, la reproduction des joueurs, ainsi que les interactions entre clients. Une interface graphique permet de visualiser l'ensemble des √©v√©nements en temps r√©el."
        },
        "pulsar": {
            "short": "Un moteur de jeu modulaire en C++ bas√© sur Vulkan, avec un langage de script en Rust et un √©diteur visuel en C# pour jeux 2D/2.5D.",
            "full": "Pulsar est un moteur de jeu modulaire d√©velopp√© en C++ avec l‚ÄôAPI graphique Vulkan, con√ßu pour afficher efficacement des sc√®nes 2D et 2.5D. Il s‚Äôint√®gre avec Neutron, un langage de script personnalis√© √©crit en Rust, rendant le d√©veloppement de jeux √† la fois accessible et expressif. Le moteur est accompagn√© d‚Äôun √©diteur visuel en C# permettant de construire des sc√®nes, g√©rer les assets et connecter les scripts de mani√®re intuitive. Pulsar vise √† offrir un environnement de d√©veloppement moderne et p√©dagogique, avec rendu acc√©l√©r√© par GPU et compatibilit√© multiplateforme. Les d√©p√¥ts de l‚Äô√©diteur, du moteur et du langage sont publics mais pas encore open source, car le projet est toujours en d√©veloppement."
        }
    },
    "contact": {
        "title": "üì¨ Contact",
        "text": "N'h√©sitez pas √† me contacter ou √† jeter un oeil √† mes profils :"
    },
    "navbar": {
        "hero": "Accueil",
        "projects": "Projets",
        "contact": "Contact"
    },
    "footer": {
        "text": "Tous droits r√©serv√©s."
    }
}